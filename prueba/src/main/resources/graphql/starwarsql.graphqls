type Friendship{
	identifier:String
	id: String
	fid: String
}
type Heroes{
	identifier: String
	charid: String
	episode (id: String, code: String): [Episode]
	hero (id: String,  fname: String, lname: String): [Character]
}
type Appears{
	identifier: String
	episodeid: String
	episode (id: String, code: String): [Episode]
}
type Character{
	identifier: String
	fname: String
	lname: String
	friends (identifier: String, id:String , fid: String): [Friendship]
	appearsIn (identifier: String): [Appears]
	type (identifier: String, name: String): [CharacterType]
}
type Episode{
	identifier: String
	code: String
}
type CharacterType{
	identifier: String
	name: String
}

type Query {
	 listFriendship(identifier: String,id: String, fid: String):[Friendship]
	 listHeroes(identifier: String):[Heroes]
	 listAppears(identifier: String, episodeid: String):[Appears]
	 listCharacter(identifier: String, fname: String, lname: String):[Character]
	 listEpisode(identifier: String, code: String):[Episode]
	 listCharacterType(identifier: String, name: String):[CharacterType]
}

type Mutation {
	 createFriendship(id: String, fid: String):Friendship
	 createHeroes(episodeid: String, charid: String):Heroes
	 createAppears(id: String, episodeid: String):Appears
	 createCharacter(id: String, fname: String, lname: String):Character
	 createEpisode(id: String, code: String):Episode
	 createCharacterType(id: String, name: String):CharacterType
}